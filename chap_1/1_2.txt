1.2 关于指针

1.2.1 恶名昭著的指针究竟是什么
	指针是一种保存变量地址的变量，在C中会频繁地被使用到。
	“指针类型”其实不是单独存在的，它是由其它类型派生而成的。
	“由引用类型T派生的指针类型有时称为‘指向T的指针’”
	既然指针类型也是一种类型，那么就要区分“指针类型的变量”、“指针类型的值”（实际上是内存的地址）
	
1.2.2 和指针的第一次亲密接触
	实际编程
	pointer.c的例子，其中作者说变量的地址与它们的声明顺序是相反的，但是在我的电脑上，变量地址的先后顺序与变量声明的先后顺序是一致的
	这应该是跟操作系统相关的不要太在意。
	由pointer.c的例子可以看出，整形变量在64为机器上占据4个字节，而指向整形的指针占据8个字节（因为指向整形的指针变量的地址间隔8）
	
	指针变量hoge_p保存了另外一个变量hoge的地址，我们认为hoge_p指向hoge
	*hoge_p可以理解为“顺藤摸瓜”
	
	要点：
		>对变量使用&运算符，可以取得该变量的地址，这个地址成为指向该变量的指针
		>指针变量hoge_p保存了指向其它变量的地址的情况下，可以说hoge_p指向hoge
		>对指针变量运用*运算符，就等同于它所指向的变量
		
	注意：
		int* p, q——这样的声明其结果是声明了指向inti型的指针p，和int型变量q
		
	C语言的语法本来就是不自然的/奇怪的/变态的
	一切关于“如果这样考虑，是不是就可以很自然地解释C的声明了？”的尝试都是徒劳的！	
1.2.3 指针和地址之间的微妙关系
	作者提出了一个问题，就是指针类型是不是在本质上与整形是一样的，这样说差强人意，因为在我的而电脑上的试验中表明的他们所占据的字节数是不一样的。
	作者又提出了一个问题，如下：
	“指针就是地址吧。那么指向int的指针也好，指向double的指针也好，他们有什么不一样吗？有必要去区分它们吗？”
	我的理解：应该体现在指针运算的时候是不一样的，比如指针+1这种操作产生的结果就是不一样的。
	有一种指针类型 void *，在对其进行指针运算如+1这样的，它只会前进1。并且这样的指针在进行类型转化之前是不能按照顺藤摸瓜的原则取得他所指向的变量的。
	
	在大部分的运行环境里，不管是“指向int的指针”还是“指向double的指针”，在运行时，都是相同的事物。但是通过使用&来取得int型变量的地址，在后续再利用指针间接取这个变量的值时，不出意外肯定是int型，为什么呢？因为对于c的编译器而言，他记住了每个指针是指向什么类型的数据，int型和double型在进行数据翻译的时候机制是完全不一样的。所以在程序编写中，如果将double型变量的指针赋值给指向int型的指针，编译器是必然会报警告的。⚠️
	总之记住一句话：编译器会帮我们记住指针指向什么样的类型！！！！！	
1.2.4 指针运算
	C语言的指针运算功能是其它语言所没有的。
	指针运算值得是什么呢？主要是以下两点：
		（1）对指针进行整数加减运算
		（2）指针之间进行减法运算
		
	例子：pointer_calc.c
	
1.2.5 什么是空指针
	NULL表示空指针常量值
	空指针是确保没有指向任何一个对象的指针。
	空指针确保它和任何非空指针比较都不会相等，因此经常作为函数发生异常时的返回值使用。
	另外对于链表来说，经常会在末尾放置一个空指针，用来提示：后面已经没有元素了。
	指向不同类型的指针之间相互赋值时，编译器会给出警告，但是：只用NULL，无论对方指向什么类型的变量，都可以被赋值和比较。
	所以没有必要将空指针进行强制类型转化在进行比较和赋值，这样是多余的，并且使程序变得看起来很奇怪。

	注意区分三个特殊的常量：
		（1）NULL，有时候NULL是定义为0的，有时候是定义为(void*)0的，为了程序的可移植性，还是要养成良好的习惯，不要默认编译器会理解我们所写的0应该理解成指针NULL
		（2）0，这个不用解释了，但是在某些情况下，NULL，'\0'其实都是0。
		（3）'\0':C语言的标准中，空字符的定义为：所有的位为0的字节，称为null character，也就是说空字符是“值为0的字符”，其实写作'\0'实际上是一种约定俗成，也为了程序读起来更自然。


1.2.6 实践——swap函数
经典的swap函数来说明c语言函数的传值调用。也就是形参是不会影响发起调用的程序部分的变量的值得！
void swap(int* a, int* b)
{
	int temp;
	
	temp = *a;
	*a = *b;
	*b = temp;
}
调用方式为：
swap(&x, &y);
其实这仍然遵循的是c语言的传值调用，但是传递的值是地址（指针变量），因此可以利用指针变量间接地访问到其所指向的变量，从而对发起调用的程序部分的变量的值产生影响
我觉得C语言的这种传值调用上的一致性挺好的，不想C++中还支持传引用调用，我记得当时在大学学习C++的时候传引用调用这一块是十分费解的！
